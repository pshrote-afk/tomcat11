/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.6
 * Generated at: 2025-09-09 03:36:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class DesignationEditForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/WEB-INF/mytags/tmtags.tld", Long.valueOf(1754657472219L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005ftm_005fModule_0026_005fname_005fnobody;

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005ftm_005fModule_0026_005fname_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005ftm_005fModule_0026_005fname_005fnobody.release();
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
      if (_jspx_meth_tm_005fModule_005f0(_jspx_page_context))
        return;
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/MasterPageTopSection.jsp", out, false);
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("function goToDesignationsView()\r\n");
      out.write("{\r\n");
      out.write("// below function submits a form which takes action to Designations.jsp\r\n");
      out.write("cancelUpdation();\r\n");
      out.write("}\r\n");
      out.write("function updateDesignation()\r\n");
      out.write("{\r\n");
      out.write("var code = document.getElementById('code').value;\r\n");
      out.write("var title = document.getElementById('title').value;\r\n");
      out.write("\r\n");
      out.write("var designation = {\r\n");
      out.write("\"code\":code,\r\n");
      out.write("\"title\":title\r\n");
      out.write("};\r\n");
      out.write("\r\n");
      out.write("var xmlHttpRequest = new XMLHttpRequest();\r\n");
      out.write("xmlHttpRequest.onreadystatechange = function() {\r\n");
      out.write("if(this.readyState==4)\r\n");
      out.write("{\r\n");
      out.write("if(this.status==200)\r\n");
      out.write("{\r\n");
      out.write("var responseData = this.responseText;\r\n");
      out.write("responseData = JSON.parse(responseData);\r\n");
      out.write("if(responseData.success==true)\r\n");
      out.write("{\r\n");
      out.write("var titleErrorSection = document.getElementById('titleErrorSection');\r\n");
      out.write("titleErrorSection.innerHTML = '';\r\n");
      out.write("var message = document.getElementById('message');\r\n");
      out.write("var editButton = document.getElementById('editButton');\r\n");
      out.write("var cancelButton = document.getElementById('cancelButton');\r\n");
      out.write("var titleInputField = document.getElementById('title').remove();\r\n");
      out.write("message.innerText = 'Designation updated successfully'; \r\n");
      out.write("editButton.innerText = 'OK';\r\n");
      out.write("editButton.onclick = goToDesignationsView;\r\n");
      out.write("cancelButton.style.display = 'none';\r\n");
      out.write("}\r\n");
      out.write("else if(responseData.success==false)\r\n");
      out.write("{\r\n");
      out.write("var titleErrorSection = document.getElementById('titleErrorSection');\r\n");
      out.write("titleErrorSection.innerHTML = responseData.errorMessage;\r\n");
      out.write("return;\r\n");
      out.write("}\r\n");
      out.write("else\r\n");
      out.write("{\r\n");
      out.write("alert('some problem');\r\n");
      out.write("}\r\n");
      out.write("}\r\n");
      out.write("}\r\n");
      out.write("};\r\n");
      out.write("xmlHttpRequest.open('POST','designations/update',true);\r\n");
      out.write("xmlHttpRequest.setRequestHeader('Content-Type','application/json');\r\n");
      out.write("xmlHttpRequest.send(JSON.stringify(designation));\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function editDesignation()\r\n");
      out.write("{\r\n");
      out.write("var code = new URLSearchParams(window.location.search).get('code');	//creating object for parsing of search query. window is global variable, location represents current page's URL, search stands for search query - href would fetch entire query including http:// ...\r\n");
      out.write("document.getElementById('code').value = code;\r\n");
      out.write("var xmlHttpRequest = new XMLHttpRequest();\r\n");
      out.write("xmlHttpRequest.onreadystatechange = function() {\r\n");
      out.write("if(this.readyState==4)\r\n");
      out.write("{\r\n");
      out.write("if(this.status==200)\r\n");
      out.write("{\r\n");
      out.write("var responseData = this.responseText;\r\n");
      out.write("responseData = JSON.parse(responseData);\r\n");
      out.write("if(responseData.success==false) //means user manually typed incorrect code in search bar. Redirect to Designations.jsp page w/o further encouragement\r\n");
      out.write("{\r\n");
      out.write("window.location.href = 'Designations.jsp';\r\n");
      out.write("}\r\n");
      out.write("else if(responseData.success==true)\r\n");
      out.write("{\r\n");
      out.write("var title = document.getElementById('title');\r\n");
      out.write("title.value = responseData.data.title;\r\n");
      out.write("}\r\n");
      out.write("else \r\n");
      out.write("{\r\n");
      out.write("alert('some problem');\r\n");
      out.write("}\r\n");
      out.write("}\r\n");
      out.write("}\r\n");
      out.write("};\r\n");
      out.write("var requestURL = 'designations/getByCode?code=' + encodeURI(code);\r\n");
      out.write("xmlHttpRequest.open('GET',requestURL,true);\r\n");
      out.write("xmlHttpRequest.send();\r\n");
      out.write("}\r\n");
      out.write("// doubt: how do we know which code to get\r\n");
      out.write("// answer: look at editDesignation() function\r\n");
      out.write("window.addEventListener('load',editDesignation);\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<script src='/stylethree/js/DesignationEditForm.js'></script>\r\n");
      out.write("<h2>Designation (Edit Module)</h2>\r\n");
      out.write("<br>\r\n");
      out.write("<form id='designationEditForm' onsubmit='return validateForm(this)'>\r\n");
      out.write("<input type='hidden' id='code' name='code' value=''>\r\n");
      out.write("<span id = 'message'>Designation</span>\r\n");
      out.write("<input type='text' id='title' name='title' maxlength='35' size='36' value=''>\r\n");
      out.write("<span class='error' id='titleErrorSection'>\r\n");
      out.write("</span><br><br>\r\n");
      out.write("<table>\r\n");
      out.write("<tr>\r\n");
      out.write("<td>\r\n");
      out.write("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n");
      out.write("</td>\r\n");
      out.write("<td>\r\n");
      out.write("<button type='button' onclick='updateDesignation()' id='editButton'>Update</button>\r\n");
      out.write("</form>\r\n");
      out.write("</td>\r\n");
      out.write("<td>\r\n");
      out.write("<button type='button' id='cancelButton' onclick='cancelUpdation()'>Cancel</button>\r\n");
      out.write("</td>\r\n");
      out.write("</tr>\r\n");
      out.write("</table>\r\n");
      out.write("<form action='/stylethree/Designations.jsp' id='cancelUpdationForm'>\r\n");
      out.write("</form>\r\n");
      out.write("\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/MasterPageBottomSection.jsp", out, false);
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_tm_005fModule_005f0(jakarta.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    jakarta.servlet.jsp.PageContext pageContext = _jspx_page_context;
    //  tm:Module
    com.thinking.machines.hr.tags.ModuleTagHandler _jspx_th_tm_005fModule_005f0 = (com.thinking.machines.hr.tags.ModuleTagHandler) _005fjspx_005ftagPool_005ftm_005fModule_0026_005fname_005fnobody.get(com.thinking.machines.hr.tags.ModuleTagHandler.class);
    _jspx_th_tm_005fModule_005f0.setPageContext(_jspx_page_context);
    _jspx_th_tm_005fModule_005f0.setParent(null);
    // /DesignationEditForm.jsp(2,0) name = name type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_tm_005fModule_005f0.setName("DESIGNATION");
    int _jspx_eval_tm_005fModule_005f0 = _jspx_th_tm_005fModule_005f0.doStartTag();
    if (_jspx_th_tm_005fModule_005f0.doEndTag() == jakarta.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      return true;
    }
    _005fjspx_005ftagPool_005ftm_005fModule_0026_005fname_005fnobody.reuse(_jspx_th_tm_005fModule_005f0);
    return false;
  }
}
